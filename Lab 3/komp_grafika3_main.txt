#include "CBallsArray.h"
#include "CBallSettingsMonitor.h"
#include "CTrap.h"

#define VK_G 0x47

HINSTANCE g_hInstance;
int g_nCmdShow;
HWND g_mainWnd;
RECT g_rectWnd;
DWORD g_prevFrameTime;
CBallsArray balls(50);
CBallSettingsMonitor monitor;
BOOL g_isGrav = FALSE;

LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

void OnIdle();

BOOL InitAppClass()
{
  ATOM class_id;
  WNDCLASS wc;

  memset(&wc, 0, sizeof(wc));

  wc.lpszMenuName = NULL;
  wc.style = CS_HREDRAW | CS_VREDRAW;
  wc.lpfnWndProc = (WNDPROC)WndProc;
  wc.cbClsExtra = 0;
  wc.cbWndExtra = 0;
  wc.hInstance = g_hInstance;
  wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
  wc.hCursor = LoadCursor(NULL, IDC_ARROW);
  wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
  wc.lpszClassName = L"LabWork1";

  class_id = RegisterClass(&wc);
  if (class_id != 0) return TRUE;
  return FALSE;

}

BOOL InitWindow()
{
  g_mainWnd = CreateWindow(L"LabWork1", L"Лабораторная работа № 1",
    WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 400, 400, 0, 0,
    g_hInstance, 0);

  if (!g_mainWnd)
    return FALSE;

  ShowWindow(g_mainWnd, g_nCmdShow);
  UpdateWindow(g_mainWnd);

  return TRUE;

}

WPARAM StartMessageLoop()
{
  MSG msg;

  while (1)
  {
    if (PeekMessage(&msg, 0, 0, 0, PM_REMOVE))
    {
      if (msg.message == WM_QUIT)
        break;
      DispatchMessage(&msg);
    }
    else
    {
      Sleep(20);
      OnIdle();
    }
  }

  return msg.wParam;
}

void OnIdle()
{
  if (g_isGrav)
    balls.SetGravityFactor(1.0);
  else
    balls.SetGravityFactor(0.0);

  DWORD cur_time = GetTickCount();
  DWORD delta_time = cur_time - g_prevFrameTime;

  balls.Move(delta_time);

  g_prevFrameTime = cur_time;

  InvalidateRect(g_mainWnd, NULL, TRUE);

}

LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
  switch (msg)
  {

  case WM_KEYDOWN:
  {
    switch (wParam)
    {
    case VK_G:
      if (g_isGrav)
        g_isGrav = FALSE;
      else
        g_isGrav = TRUE;
      return 0;

    case VK_DOWN:
      monitor.SpeedDown();
      return 0;

    case VK_UP:
      monitor.SpeedUp();

    case VK_LEFT:
      monitor.AngleUp();
      return 0;

    case VK_RIGHT:
      monitor.AngleDown();
      return 0;
    }

    break;

  }

  case WM_PAINT:
  {

    HDC hDC;
    PAINTSTRUCT ps;

    hDC = BeginPaint(hWnd, &ps);

    if (g_isGrav)
      TextOut(hDC, 35, 5, L"Гравитация включена", 19);
    else
      TextOut(hDC, 35, 5, L"Гравитация выключена", 20);

    balls.Draw(hDC);

    balls.trap->Draw(hDC);

    balls.trap2->Draw(hDC);

    monitor.Draw(hDC);

    EndPaint(hWnd, &ps);


    return 0;
  }

  case WM_RBUTTONUP:
  {
    double xpos = GET_X_LPARAM(lParam);
    double ypos = GET_Y_LPARAM(lParam);

    CColoredBall* ball = balls.AddColoredBall();

    if (ball != NULL)
    {
      double vx, vy;
      monitor.GetVxVy(vx, vy);
      ball->SetParams(xpos, ypos, 2, vx, vy, g_rectWnd);
      ball->SetColor(255, 0, 0);
    }
    return 0;
  }

  case WM_LBUTTONUP:
  {
    double xpos = GET_X_LPARAM(lParam);
    double ypos = GET_Y_LPARAM(lParam);

    CBall* ball = balls.Add();

    if (ball != NULL)
    {
      double vx, vy;
      monitor.GetVxVy(vx, vy);
      ball->SetParams(xpos, ypos, 2, vx, vy, g_rectWnd);
    }

    return 0;
  }

  case WM_SIZE:
  {

    g_rectWnd.top = 0;
    g_rectWnd.left = 0;
    g_rectWnd.bottom = HIWORD(lParam);
    g_rectWnd.right = LOWORD(lParam);

    balls.SetBounds(g_rectWnd);

    return 0;
  }

  case WM_DESTROY:
  {
    PostQuitMessage(0);
    return 0;
  }
  default:
    break;
  }

  return DefWindowProc(hWnd, msg, wParam, lParam);
}


int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
  g_hInstance = hInstance;
  g_nCmdShow = nCmdShow;
  g_prevFrameTime = GetTickCount();

  CBall* ball;

  ball = balls.Add();
  ball->SetParams(10, 10, 2, 50, 50, g_rectWnd);

  ball = balls.Add();
  ball->SetParams(100, 10, 2, -70, -70, g_rectWnd);

  if (!InitAppClass())
    return 0;

  if (!InitWindow())
    return 0;


  return StartMessageLoop();

}