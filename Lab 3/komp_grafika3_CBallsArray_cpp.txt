#include "CBallsArray.h"

CBallsArray::CBallsArray(int max_balls)
{
  this->count = 0;
  this->max_balls = max_balls;
  this->balls = new CBall*[max_balls];
  this->trap = new CTrap(200, 180, 500, 50);
  this->trap2 = new CTrap(100, 250, 500, 25);
}

CBallsArray::~CBallsArray(void)
{
  for (int i = 0; i < count; i++)
    delete this->balls[i];

  delete[] this->balls;
}

CBall*CBallsArray::Add()
{
  if (count >= max_balls)
    return NULL;

  count++;

  balls[count - 1] = new CBall;

  return balls[count - 1];
}

void CBallsArray::Draw(HDC dc)
{
  for (int i = 0; i < count; i++)
    balls[i]->Draw(dc);
}

void CBallsArray::Move(DWORD delta_ticks)
{
  CBall* ball1;
  CBall* ball2;


  for (int i = 0; i < count; i++)
  {
    double tmpVy = balls[i]->GetVy();
    tmpVy += this->gF;
    balls[i]->SetVy(tmpVy);

    this->trap->Effect(balls[i]);

    this->trap2->EffectDisappear(balls[i]);


    for (int j = (i + 1); j < count; j++)
    {
      ball1 = this->balls[i];
      ball2 = this->balls[j];

      double cx = ball2->GetX() - ball1->GetX();
      double cy = ball2->GetY() - ball1->GetY();

      double cSqr = cx * cx + cy * cy;

      if (cSqr <= ((ball1->GetR() + ball2->GetR()) * (ball1->GetR() + ball2->GetR())))
      {
        double ball1Scalar = ball1->GetVx()*cx + ball1->GetVy()*cy;
        double ball2Scalar = ball2->GetVx()*cx + ball2->GetVy()*cy;

        double ball1Nvx = (cx*ball1Scalar) / cSqr;
        double ball1Nvy = (cy*ball1Scalar) / cSqr;
        double ball1Tvx = ball1->GetVx() - ball1Nvx;
        double ball1Tvy = ball1->GetVy() - ball1Nvy;

        double ball2Nvx = (cx*ball2Scalar) / cSqr;
        double ball2Nvy = (cy*ball2Scalar) / cSqr;
        double ball2Tvx = ball2->GetVx() - ball2Nvx;
        double ball2Tvy = ball2->GetVy() - ball2Nvy;

        ball1->SetVx(ball2Nvx + ball1Tvx);
        ball1->SetVy(ball2Nvy + ball1Tvy);
        ball2->SetVx(ball1Nvx + ball2Tvx);
        ball2->SetVy(ball1Nvy + ball2Tvy);

      }

    }
  }

  for (int i = 0; i < count; i++)
  {
    balls[i]->Move(delta_ticks);
  }

}

void CBallsArray::SetBounds(RECT bnds)
{
  for (int i = 0; i < count; i++)
    balls[i]->SetBounds(bnds);

}

CColoredBall* CBallsArray::AddColoredBall()
{
  if (count >= max_balls)
    return NULL;

  count++;

  balls[count - 1] = new CColoredBall();

  return (CColoredBall*)(balls[count - 1]);
}

void CBallsArray::SetGravityFactor(double gF)
{
  this->gF = gF;
}